{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\MyReactApps\\\\nextjs-bigProject\\\\pages\\\\[meetupId]\\\\index.js\";\nimport { Fragment } from \"react\";\nimport MeetupDetail from '../../components/meetups/MeetupDetail';\n\nfunction MeetupDetails(props) {\n  return /*#__PURE__*/_jsxDEV(MeetupDetail, {\n    image: \"\",\n    title: \"First Meetup\",\n    address: \"Some street, some city\",\n    description: \"This is first meetup\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 6,\n    columnNumber: 9\n  }, this);\n}\n\n_c = MeetupDetails;\n;\nexport var __N_SSG = true;\nexport default MeetupDetails;\n\nvar _c;\n\n$RefreshReg$(_c, \"MeetupDetails\");","map":{"version":3,"sources":["C:/MyReactApps/nextjs-bigProject/pages/[meetupId]/index.js"],"names":["Fragment","MeetupDetail","MeetupDetails","props"],"mappings":";;AAAA,SAASA,QAAT,QAAyB,OAAzB;AACA,OAAOC,YAAP,MAAyB,uCAAzB;;AAEA,SAASC,aAAT,CAAuBC,KAAvB,EAA6B;AACzB,sBACI,QAAC,YAAD;AACI,IAAA,KAAK,EAAC,EADV;AAEI,IAAA,KAAK,EAAC,cAFV;AAGI,IAAA,OAAO,EAAC,wBAHZ;AAII,IAAA,WAAW,EAAC;AAJhB;AAAA;AAAA;AAAA;AAAA,UADJ;AASH;;KAVQD,a;AAUR;;AA8CD,eAAeA,aAAf","sourcesContent":["import { Fragment } from \"react\";\r\nimport MeetupDetail from '../../components/meetups/MeetupDetail';\r\n\r\nfunction MeetupDetails(props){\r\n    return (\r\n        <MeetupDetail \r\n            image=\"\"\r\n            title=\"First Meetup\"\r\n            address=\"Some street, some city\"\r\n            description='This is first meetup'\r\n         />\r\n    \r\n    );\r\n};\r\n\r\nexport async function getStaticPaths(){\r\n    return {\r\n        /*fallback tells Nextjs whether your paths array contains\r\n        all supported parameter values or just some of them.\r\n        If you set fallback to false, you say that your path\r\n        contains all supported meetupIds values. It means that if \r\n        the user enters anything not supported here, e.g. m3, then\r\n        user will see 404 error. If we set fallback to true, then \r\n        nextJs will try to generate the page with this meetupId dynamically\r\n        on the server for the incoming requests.\r\n        */\r\n        fallback: true,\r\n        paths: [\r\n            //array having one object per one version of ths dynamic page,\r\n            //where params key is again a nested object where key value pairs,\r\n            //that leads to a dynamic page.\r\n            {\r\n                params: {\r\n                    meetupId : 'm1',\r\n                },\r\n            },\r\n        ],\r\n    };\r\n}\r\n\r\nexport async function getStaticProps(context){\r\n    \r\n    //params is an object where our identifiers in [] will be the properties \r\n    //and values is the actual values encoded in the url\r\n    const meetupId = context.params.meetupId;\r\n    \r\n    return {\r\n        props: {\r\n            meetupData: {\r\n                image:'',\r\n                id: meetupId,\r\n                title: 'First Meetup',\r\n                address:'Some address',\r\n                description: 'This is first meetup',\r\n            },\r\n        },\r\n    };\r\n}\r\n\r\nexport default MeetupDetails;\r\n\r\n"]},"metadata":{},"sourceType":"module"}