{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\MyReactApps\\\\nextjs-bigProject\\\\pages\\\\[meetupId]\\\\index.js\";\nimport { Fragment } from \"react\";\nimport { MongoClient } from 'mongodb';\nimport MeetupDetail from '../../components/meetups/MeetupDetail';\n\nfunction MeetupDetails(props) {\n  return /*#__PURE__*/_jsxDEV(MeetupDetail, {\n    image: \"\",\n    title: \"First Meetup\",\n    address: \"Some street, some city\",\n    description: \"This is first meetup\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 7,\n    columnNumber: 9\n  }, this);\n}\n\n;\nexport async function getStaticPaths() {\n  const client = await MongoClient.connect('mongodb+srv://Viral_user:Viralreact@cluster0.nxrzdzw.mongodb.net/meetupsDatabase?retryWrites=true&w=majority');\n  const db = client.db();\n  const meetupsCollection = db.collection('meetupsCollection'); //empty criteria as first argument of find() means no filter of records, \n  //means fetch all records, but second argument says fetch only id field/column\n\n  const meetups = await meetupsCollection.find({}, {\n    _id: 1\n  }).toArray();\n  return {\n    /*fallback tells Nextjs whether your paths array contains\r\n    all supported parameter values or just some of them.\r\n    If you set fallback to false, you say that your path\r\n    contains all supported meetupIds values. It means that if \r\n    the user enters anything not supported here, e.g. m3, then\r\n    user will see 404 error. If we set fallback to true, then \r\n    nextJs will try to generate the page with this meetupId dynamically\r\n    on the server for the incoming requests.\r\n    This way we can use paths to pre-generate only most frequently visited pages form the paths array,\r\n    and dynamically generate path for less frequently visited pages\r\n    */\n    fallback: false,\n    paths: //array having one object per one version of ths dynamic page,\n    //where params key is again a nested object where key value pairs,\n    //that leads to a dynamic page.\n    meetups.map(meetup => ({\n      params: {\n        meetupId: meetup._id.toString()\n      }\n    }))\n  };\n}\nexport async function getStaticProps(context) {\n  //params is an object where our identifiers in [] will be the properties \n  //and values is the actual values encoded in the url\n  const meetupId = context.params.meetupId; //this log will be displayed only in the development server terminal\n  // in Visual Studio Code and not in the console of the browser, because\n  //getStaticProps is called only during the build process.\n\n  console.log(meetupId);\n  return {\n    props: {\n      meetupData: {\n        image: '',\n        id: meetupId,\n        title: 'First Meetup',\n        address: 'Some address',\n        description: 'This is first meetup'\n      }\n    }\n  };\n}\nexport default MeetupDetails;","map":{"version":3,"sources":["C:/MyReactApps/nextjs-bigProject/pages/[meetupId]/index.js"],"names":["Fragment","MongoClient","MeetupDetail","MeetupDetails","props","getStaticPaths","client","connect","db","meetupsCollection","collection","meetups","find","_id","toArray","fallback","paths","map","meetup","params","meetupId","toString","getStaticProps","context","console","log","meetupData","image","id","title","address","description"],"mappings":";;AAAA,SAASA,QAAT,QAAyB,OAAzB;AACA,SAASC,WAAT,QAA4B,SAA5B;AACA,OAAOC,YAAP,MAAyB,uCAAzB;;AAEA,SAASC,aAAT,CAAuBC,KAAvB,EAA6B;AACzB,sBACI,QAAC,YAAD;AACI,IAAA,KAAK,EAAC,EADV;AAEI,IAAA,KAAK,EAAC,cAFV;AAGI,IAAA,OAAO,EAAC,wBAHZ;AAII,IAAA,WAAW,EAAC;AAJhB;AAAA;AAAA;AAAA;AAAA,UADJ;AASH;;AAAA;AAED,OAAO,eAAeC,cAAf,GAA+B;AAClC,QAAMC,MAAM,GAAG,MAAML,WAAW,CAACM,OAAZ,CAAoB,8GAApB,CAArB;AAEA,QAAMC,EAAE,GAAGF,MAAM,CAACE,EAAP,EAAX;AACA,QAAMC,iBAAiB,GAAGD,EAAE,CAACE,UAAH,CAAc,mBAAd,CAA1B,CAJkC,CAMlC;AACA;;AACA,QAAMC,OAAO,GAAG,MAAMF,iBAAiB,CAACG,IAAlB,CAAuB,EAAvB,EAA2B;AAACC,IAAAA,GAAG,EAAE;AAAN,GAA3B,EAAsCC,OAAtC,EAAtB;AAEA,SAAO;AACH;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACQC,IAAAA,QAAQ,EAAE,KAZP;AAaHC,IAAAA,KAAK,EAEJ;AACG;AACA;AACAL,IAAAA,OAAO,CAACM,GAAR,CAAYC,MAAM,KAAK;AACPC,MAAAA,MAAM,EAAE;AACJC,QAAAA,QAAQ,EAAEF,MAAM,CAACL,GAAP,CAAWQ,QAAX;AADN;AADD,KAAL,CAAlB;AAlBD,GAAP;AAwBH;AAED,OAAO,eAAeC,cAAf,CAA8BC,OAA9B,EAAsC;AAEzC;AACA;AACA,QAAMH,QAAQ,GAAGG,OAAO,CAACJ,MAAR,CAAeC,QAAhC,CAJyC,CAMzC;AACA;AACA;;AACAI,EAAAA,OAAO,CAACC,GAAR,CAAYL,QAAZ;AAEA,SAAO;AACHhB,IAAAA,KAAK,EAAE;AACHsB,MAAAA,UAAU,EAAE;AACRC,QAAAA,KAAK,EAAC,EADE;AAERC,QAAAA,EAAE,EAAER,QAFI;AAGRS,QAAAA,KAAK,EAAE,cAHC;AAIRC,QAAAA,OAAO,EAAC,cAJA;AAKRC,QAAAA,WAAW,EAAE;AALL;AADT;AADJ,GAAP;AAWH;AAED,eAAe5B,aAAf","sourcesContent":["import { Fragment } from \"react\";\r\nimport { MongoClient } from 'mongodb';\r\nimport MeetupDetail from '../../components/meetups/MeetupDetail';\r\n\r\nfunction MeetupDetails(props){\r\n    return (\r\n        <MeetupDetail \r\n            image=\"\"\r\n            title=\"First Meetup\"\r\n            address=\"Some street, some city\"\r\n            description='This is first meetup'\r\n         />\r\n    \r\n    );\r\n};\r\n\r\nexport async function getStaticPaths(){\r\n    const client = await MongoClient.connect('mongodb+srv://Viral_user:Viralreact@cluster0.nxrzdzw.mongodb.net/meetupsDatabase?retryWrites=true&w=majority');\r\n\r\n    const db = client.db();\r\n    const meetupsCollection = db.collection('meetupsCollection');\r\n\r\n    //empty criteria as first argument of find() means no filter of records, \r\n    //means fetch all records, but second argument says fetch only id field/column\r\n    const meetups = await meetupsCollection.find({}, {_id: 1 }).toArray();\r\n\r\n    return {\r\n        /*fallback tells Nextjs whether your paths array contains\r\n        all supported parameter values or just some of them.\r\n        If you set fallback to false, you say that your path\r\n        contains all supported meetupIds values. It means that if \r\n        the user enters anything not supported here, e.g. m3, then\r\n        user will see 404 error. If we set fallback to true, then \r\n        nextJs will try to generate the page with this meetupId dynamically\r\n        on the server for the incoming requests.\r\n        This way we can use paths to pre-generate only most frequently visited pages form the paths array,\r\n        and dynamically generate path for less frequently visited pages\r\n        */\r\n        fallback: false,\r\n        paths: \r\n\r\n         //array having one object per one version of ths dynamic page,\r\n            //where params key is again a nested object where key value pairs,\r\n            //that leads to a dynamic page.\r\n            meetups.map(meetup => ({ \r\n                            params: { \r\n                                meetupId: meetup._id.toString()\r\n                            }\r\n                        })),       \r\n    };\r\n}\r\n\r\nexport async function getStaticProps(context){\r\n    \r\n    //params is an object where our identifiers in [] will be the properties \r\n    //and values is the actual values encoded in the url\r\n    const meetupId = context.params.meetupId;\r\n    \r\n    //this log will be displayed only in the development server terminal\r\n    // in Visual Studio Code and not in the console of the browser, because\r\n    //getStaticProps is called only during the build process.\r\n    console.log(meetupId);\r\n\r\n    return {\r\n        props: {\r\n            meetupData: {\r\n                image:'',\r\n                id: meetupId,\r\n                title: 'First Meetup',\r\n                address:'Some address',\r\n                description: 'This is first meetup',\r\n            },\r\n        },\r\n    };\r\n}\r\n\r\nexport default MeetupDetails;\r\n\r\n"]},"metadata":{},"sourceType":"module"}