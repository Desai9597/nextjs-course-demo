{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\MyReactApps\\\\nextjs-bigProject\\\\pages\\\\index.js\";\nimport MeetupList from '../components/meetups/MeetupList';\nimport { useEffect } from 'react';\nimport { MongoClient } from 'mongodb';\n\nfunction HomePage(props) {\n  /*  No need to maintain state if we are using getStaticProps() for the data\r\n  const [loadedMeetups, setLoadedMeetups] = useState([]);\r\n    useEffect(() => {\r\n      //send a http request and fetch data\r\n      setLoadedMeetups(DUMMY_MEETUPS);\r\n  },[]);\r\n    return <MeetupList meetups={loadedMeetups} />\r\n  */\n  return /*#__PURE__*/_jsxDEV(MeetupList, {\n    meetups: props.meetups\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 12\n  }, this);\n} //This is a special function defined in nextjs.\n//Nextjs will look for a function with exatcly this name,\n//it executes it during the pre-rendering process.\n//So it will not call your component  HomePAge() function directly,\n//and will not use the returned JSX html content, but\n//first will call getStaticProps() before that.\n//The job of this function is to prepare props for HomePage()\n//So data is loaded first, before the HomePage() is executed, \n//hence nextjs can render component with the required data.\n//Any code written here will not be executed on client side.\n//This code is executed during the built process, not on the server or client.\n//This way we can move data fetching away from the client to the build process.\n//Now if we inspect we will get data in list instead of empty.\n//Now data is not fecthed on second render cycle on the client,\n//but initially when the page is re-rendering during the built process\n//This is the key feature of NextJS i.e. data fetching for pre-rendering\n\n\n_c = HomePage;\n\n/* This is an alternative of using getStaticProps()\r\nThe difference is that this function will not run during the build process,\r\nbut instead always on the server after deployment.\r\nThe page will be re-generated after every incoming request,\r\nso you want to pre-generate the page dynamically,\r\non the fly after deployment on the server, not during the build process\r\nor not just every couple of seconds.\r\n\r\n\r\nexport async function getServerSideProps(context){\r\n   \r\n   const req = context.req;\r\n   const res = context.res;\r\n\r\n    return {\r\n        props: {\r\n            meetups: DUMMY_MEETUPS\r\n        }\r\n    };\r\n}\r\n*/\nexport var __N_SSG = true;\nexport default HomePage;\n\nvar _c;\n\n$RefreshReg$(_c, \"HomePage\");","map":{"version":3,"sources":["C:/MyReactApps/nextjs-bigProject/pages/index.js"],"names":["MeetupList","useEffect","MongoClient","HomePage","props","meetups"],"mappings":";;AAAA,OAAOA,UAAP,MAAuB,kCAAvB;AACA,SAAQC,SAAR,QAAwB,OAAxB;AACA,SAASC,WAAT,QAA4B,SAA5B;;AA0BA,SAASC,QAAT,CAAkBC,KAAlB,EAAwB;AAEpB;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AAII,sBAAO,QAAC,UAAD;AAAY,IAAA,OAAO,EAAEA,KAAK,CAACC;AAA3B;AAAA;AAAA;AAAA;AAAA,UAAP;AACH,C,CAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;;KAhCSF,Q;;AAyDT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,eAAeA,QAAf","sourcesContent":["import MeetupList from '../components/meetups/MeetupList';\r\nimport {useEffect} from 'react';\r\nimport { MongoClient } from 'mongodb';\r\n\r\nconst DUMMY_MEETUPS = [\r\n    {\r\n        id: 'm1',\r\n        title: 'A first meetup',\r\n        image: './officeBuilding',\r\n        address: 'Some address 142, Countrybrook loop',\r\n        description: 'This is first meetup'\r\n    },\r\n    {\r\n        id: 'm2',\r\n        title: 'A second meetup',\r\n        image: './officeBuilding',\r\n        address: 'Some address 142, Countrybrook loop',\r\n        description: 'This is second meetup'\r\n    },\r\n    {\r\n        id: 'm3',\r\n        title: 'A third meetup',\r\n        image: './officeBuilding',\r\n        address: 'Some address 142, Countrybrook loop',\r\n        description: 'This is third meetup'\r\n    }\r\n];\r\n\r\nfunction HomePage(props){\r\n \r\n    /*  No need to maintain state if we are using getStaticProps() for the data\r\n    const [loadedMeetups, setLoadedMeetups] = useState([]);\r\n\r\n    useEffect(() => {\r\n        //send a http request and fetch data\r\n        setLoadedMeetups(DUMMY_MEETUPS);\r\n    },[]);\r\n\r\n    return <MeetupList meetups={loadedMeetups} />\r\n    */\r\n\r\n    return <MeetupList meetups={props.meetups} />\r\n}\r\n\r\n//This is a special function defined in nextjs.\r\n//Nextjs will look for a function with exatcly this name,\r\n//it executes it during the pre-rendering process.\r\n//So it will not call your component  HomePAge() function directly,\r\n//and will not use the returned JSX html content, but\r\n//first will call getStaticProps() before that.\r\n//The job of this function is to prepare props for HomePage()\r\n//So data is loaded first, before the HomePage() is executed, \r\n//hence nextjs can render component with the required data.\r\n//Any code written here will not be executed on client side.\r\n//This code is executed during the built process, not on the server or client.\r\n\r\n//This way we can move data fetching away from the client to the build process.\r\n//Now if we inspect we will get data in list instead of empty.\r\n//Now data is not fecthed on second render cycle on the client,\r\n//but initially when the page is re-rendering during the built process\r\n//This is the key feature of NextJS i.e. data fetching for pre-rendering\r\n\r\n\r\nexport async function getStaticProps() {\r\n    //fetch data from an API\r\n\r\n    //always need to return an object with props key only\r\n    return {\r\n        props: {\r\n            meetups: DUMMY_MEETUPS\r\n        },\r\n        //By using revalidate, we unlock a feature called incremental static generation\r\n        //It is number of seconds the Nextjs will wait,\r\n        //untill it re-generates this page for an incoming request.\r\n        //It means this page will not be only generated in build process,\r\n        //but also (for every seconds specified) on the server.\r\n        //This way newly generated page will replace old generated page.\r\n        //Thus your data will be not older than 10 seconds.\r\n        //Thus it will be re-generated on the server even after deplyment.\r\n        //Hence we dont need to re-deploy and re-built just becuase data changed.\r\n        revalidate: 10\r\n    };\r\n}\r\n\r\n\r\n/* This is an alternative of using getStaticProps()\r\nThe difference is that this function will not run during the build process,\r\nbut instead always on the server after deployment.\r\nThe page will be re-generated after every incoming request,\r\nso you want to pre-generate the page dynamically,\r\non the fly after deployment on the server, not during the build process\r\nor not just every couple of seconds.\r\n\r\n\r\nexport async function getServerSideProps(context){\r\n   \r\n   const req = context.req;\r\n   const res = context.res;\r\n\r\n    return {\r\n        props: {\r\n            meetups: DUMMY_MEETUPS\r\n        }\r\n    };\r\n}\r\n*/\r\n\r\nexport default HomePage;"]},"metadata":{},"sourceType":"module"}