{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\MyReactApps\\\\nextjs-bigProject\\\\pages\\\\index.js\";\nimport MeetupList from '../components/meetups/MeetupList';\nimport { useEffect } from 'react';\nimport Head from 'next/head';\n/*This imported package will not be the part of the client side bundle\r\nSo we can import MongoClient code here, which will be executed only on server.\r\nAnd NextJS will detect this and not include it in client side bundle, \r\nwhich is good from bundle size point of view and also security.\r\nSo we can use both client side and server side code, and depending \r\nwhere we use it , it will be included in different bundles,\r\nwhich are independent from each other. This is a nice feature provided\r\nby NextJS.\r\n*/\n\nimport { MongoClient } from 'mongodb';\nimport { Fragment } from 'react';\nconst DUMMY_MEETUPS = [{\n  id: 'm1',\n  title: 'A first meetup',\n  image: './officeBuilding',\n  address: 'Some address 142, Countrybrook loop',\n  description: 'This is first meetup'\n}, {\n  id: 'm2',\n  title: 'A second meetup',\n  image: './officeBuilding',\n  address: 'Some address 142, Countrybrook loop',\n  description: 'This is second meetup'\n}, {\n  id: 'm3',\n  title: 'A third meetup',\n  image: './officeBuilding',\n  address: 'Some address 142, Countrybrook loop',\n  description: 'This is third meetup'\n}];\n\nfunction HomePage(props) {\n  /*  No need to maintain state if we are using getStaticProps() for the data\r\n  const [loadedMeetups, setLoadedMeetups] = useState([]);\r\n    useEffect(() => {\r\n      //send a http request and fetch data\r\n      setLoadedMeetups(DUMMY_MEETUPS);\r\n  },[]);\r\n    return <MeetupList meetups={loadedMeetups} />\r\n  */\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Head, {\n      children: /*#__PURE__*/_jsxDEV(\"title\", {\n        children: \"React Meetups\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 6\n    }, this), /*#__PURE__*/_jsxDEV(MeetupList, {\n      meetups: props.meetups\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 5\n  }, this);\n} //This is a special function defined in nextjs.\n//Nextjs will look for a function with exatcly this name,\n//it executes it during the pre-rendering process.\n//So it will not call your component  HomePAge() function directly,\n//and will not use the returned JSX html content, but\n//first will call getStaticProps() before that.\n//The job of this function is to prepare props for HomePage()\n//So data is loaded first, before the HomePage() is executed, \n//hence nextjs can render component with the required data.\n//Any code written here will not be executed on client side.\n//This code is executed during the built process, not on the server or client.\n//It is not executed for every request, because it is not server side rendering.\n//This way we can move data fetching away from the client to the build process.\n//Now if we inspect we will get data in list instead of empty.\n//Now data is not fecthed on second render cycle on the client,\n//but initially when the page is re-rendering during the built process\n//This is the key feature of NextJS i.e. data fetching for pre-rendering\n\n\nexport async function getStaticProps() {\n  //fetch data from an API\n  const client = await MongoClient.connect('mongodb+srv://Viral_user:Viralreact@cluster0.nxrzdzw.mongodb.net/meetupsDatabase?retryWrites=true&w=majority');\n  const db = client.db();\n  const meetupsCollection = db.collection('meetupsCollection'); //find() will return all the documents from the collection\n\n  const meetups = await meetupsCollection.find().toArray();\n  client.close(); //always need to return an object with props key only\n\n  return {\n    props: {\n      meetups: meetups.map(meetup => ({\n        title: meetup.title,\n        address: meetup.address,\n        image: meetup.image,\n        id: meetup._id.toString()\n      }))\n    },\n    //By using revalidate, we unlock a feature called incremental static generation\n    //It is number of seconds the Nextjs will wait,\n    //untill it re-generates this page for an incoming request.\n    //It means this page will not be only generated in build process,\n    //but also (for every seconds specified) on the server.\n    //This way newly generated page will replace old generated page.\n    //Thus your data will be not older than 10 seconds.\n    //Thus it will be re-generated on the server even after deplyment.\n    //Hence we dont need to re-deploy and re-built just becuase data changed.\n    revalidate: 10\n  };\n}\n/* This is an alternative of using getStaticProps()\r\nThe difference is that this function will not run during the build process,\r\nbut instead always on the server, after deployment.\r\nThe page will be re-generated after every incoming request,\r\nso you want to pre-generate the page dynamically,\r\non the fly after deployment on the server, not during the build process\r\nor not just every couple of seconds.\r\n\r\n\r\nexport async function getServerSideProps(context){\r\n   \r\n   const req = context.req;\r\n   const res = context.res;\r\n\r\n    return {\r\n        props: {\r\n            meetups: DUMMY_MEETUPS\r\n        }\r\n    };\r\n}\r\n*/\n\nexport default HomePage;","map":{"version":3,"sources":["C:/MyReactApps/nextjs-bigProject/pages/index.js"],"names":["MeetupList","useEffect","Head","MongoClient","Fragment","DUMMY_MEETUPS","id","title","image","address","description","HomePage","props","meetups","getStaticProps","client","connect","db","meetupsCollection","collection","find","toArray","close","map","meetup","_id","toString","revalidate"],"mappings":";;AAAA,OAAOA,UAAP,MAAuB,kCAAvB;AACA,SAAQC,SAAR,QAAwB,OAAxB;AACA,OAAOC,IAAP,MAAiB,WAAjB;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,WAAT,QAA4B,SAA5B;AACA,SAASC,QAAT,QAAyB,OAAzB;AAEA,MAAMC,aAAa,GAAG,CAClB;AACIC,EAAAA,EAAE,EAAE,IADR;AAEIC,EAAAA,KAAK,EAAE,gBAFX;AAGIC,EAAAA,KAAK,EAAE,kBAHX;AAIIC,EAAAA,OAAO,EAAE,qCAJb;AAKIC,EAAAA,WAAW,EAAE;AALjB,CADkB,EAQlB;AACIJ,EAAAA,EAAE,EAAE,IADR;AAEIC,EAAAA,KAAK,EAAE,iBAFX;AAGIC,EAAAA,KAAK,EAAE,kBAHX;AAIIC,EAAAA,OAAO,EAAE,qCAJb;AAKIC,EAAAA,WAAW,EAAE;AALjB,CARkB,EAelB;AACIJ,EAAAA,EAAE,EAAE,IADR;AAEIC,EAAAA,KAAK,EAAE,gBAFX;AAGIC,EAAAA,KAAK,EAAE,kBAHX;AAIIC,EAAAA,OAAO,EAAE,qCAJb;AAKIC,EAAAA,WAAW,EAAE;AALjB,CAfkB,CAAtB;;AAwBA,SAASC,QAAT,CAAkBC,KAAlB,EAAwB;AAEpB;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AAII,sBACA,QAAC,QAAD;AAAA,4BACC,QAAC,IAAD;AAAA,6BACG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADH;AAAA;AAAA;AAAA;AAAA,YADD,eAII,QAAC,UAAD;AAAY,MAAA,OAAO,EAAEA,KAAK,CAACC;AAA3B;AAAA;AAAA;AAAA;AAAA,YAJJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADA;AAQH,C,CAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA,OAAO,eAAeC,cAAf,GAAgC;AACnC;AAEA,QAAMC,MAAM,GAAG,MAAMZ,WAAW,CAACa,OAAZ,CAAoB,8GAApB,CAArB;AAEA,QAAMC,EAAE,GAAGF,MAAM,CAACE,EAAP,EAAX;AACA,QAAMC,iBAAiB,GAAGD,EAAE,CAACE,UAAH,CAAc,mBAAd,CAA1B,CANmC,CAQnC;;AACA,QAAMN,OAAO,GAAG,MAAMK,iBAAiB,CAACE,IAAlB,GAAyBC,OAAzB,EAAtB;AAEAN,EAAAA,MAAM,CAACO,KAAP,GAXmC,CAanC;;AACA,SAAO;AACHV,IAAAA,KAAK,EAAE;AACHC,MAAAA,OAAO,EAAEA,OAAO,CAACU,GAAR,CAAYC,MAAM,KAAK;AAC5BjB,QAAAA,KAAK,EAAEiB,MAAM,CAACjB,KADc;AAE5BE,QAAAA,OAAO,EAAEe,MAAM,CAACf,OAFY;AAG5BD,QAAAA,KAAK,EAAEgB,MAAM,CAAChB,KAHc;AAI5BF,QAAAA,EAAE,EAAEkB,MAAM,CAACC,GAAP,CAAWC,QAAX;AAJwB,OAAL,CAAlB;AADN,KADJ;AASH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAC,IAAAA,UAAU,EAAE;AAlBT,GAAP;AAoBH;AAGD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,eAAehB,QAAf","sourcesContent":["import MeetupList from '../components/meetups/MeetupList';\r\nimport {useEffect} from 'react';\r\nimport Head from 'next/head';\r\n\r\n\r\n/*This imported package will not be the part of the client side bundle\r\nSo we can import MongoClient code here, which will be executed only on server.\r\nAnd NextJS will detect this and not include it in client side bundle, \r\nwhich is good from bundle size point of view and also security.\r\nSo we can use both client side and server side code, and depending \r\nwhere we use it , it will be included in different bundles,\r\nwhich are independent from each other. This is a nice feature provided\r\nby NextJS.\r\n*/\r\nimport { MongoClient } from 'mongodb';\r\nimport { Fragment } from 'react';\r\n\r\nconst DUMMY_MEETUPS = [\r\n    {\r\n        id: 'm1',\r\n        title: 'A first meetup',\r\n        image: './officeBuilding',\r\n        address: 'Some address 142, Countrybrook loop',\r\n        description: 'This is first meetup'\r\n    },\r\n    {\r\n        id: 'm2',\r\n        title: 'A second meetup',\r\n        image: './officeBuilding',\r\n        address: 'Some address 142, Countrybrook loop',\r\n        description: 'This is second meetup'\r\n    },\r\n    {\r\n        id: 'm3',\r\n        title: 'A third meetup',\r\n        image: './officeBuilding',\r\n        address: 'Some address 142, Countrybrook loop',\r\n        description: 'This is third meetup'\r\n    }\r\n];\r\n\r\nfunction HomePage(props){\r\n \r\n    /*  No need to maintain state if we are using getStaticProps() for the data\r\n    const [loadedMeetups, setLoadedMeetups] = useState([]);\r\n\r\n    useEffect(() => {\r\n        //send a http request and fetch data\r\n        setLoadedMeetups(DUMMY_MEETUPS);\r\n    },[]);\r\n\r\n    return <MeetupList meetups={loadedMeetups} />\r\n    */\r\n\r\n    return ( \r\n    <Fragment>\r\n     <Head>\r\n        <title>React Meetups</title>\r\n     </Head>\r\n        <MeetupList meetups={props.meetups} />\r\n    </Fragment>\r\n    );\r\n}\r\n\r\n//This is a special function defined in nextjs.\r\n//Nextjs will look for a function with exatcly this name,\r\n//it executes it during the pre-rendering process.\r\n//So it will not call your component  HomePAge() function directly,\r\n//and will not use the returned JSX html content, but\r\n//first will call getStaticProps() before that.\r\n//The job of this function is to prepare props for HomePage()\r\n//So data is loaded first, before the HomePage() is executed, \r\n//hence nextjs can render component with the required data.\r\n//Any code written here will not be executed on client side.\r\n//This code is executed during the built process, not on the server or client.\r\n//It is not executed for every request, because it is not server side rendering.\r\n//This way we can move data fetching away from the client to the build process.\r\n//Now if we inspect we will get data in list instead of empty.\r\n//Now data is not fecthed on second render cycle on the client,\r\n//but initially when the page is re-rendering during the built process\r\n//This is the key feature of NextJS i.e. data fetching for pre-rendering\r\n\r\n\r\nexport async function getStaticProps() {\r\n    //fetch data from an API\r\n\r\n    const client = await MongoClient.connect('mongodb+srv://Viral_user:Viralreact@cluster0.nxrzdzw.mongodb.net/meetupsDatabase?retryWrites=true&w=majority');\r\n\r\n    const db = client.db();\r\n    const meetupsCollection = db.collection('meetupsCollection');\r\n\r\n    //find() will return all the documents from the collection\r\n    const meetups = await meetupsCollection.find().toArray();\r\n\r\n    client.close();\r\n\r\n    //always need to return an object with props key only\r\n    return {\r\n        props: {\r\n            meetups: meetups.map(meetup => ({\r\n                title: meetup.title,\r\n                address: meetup.address,\r\n                image: meetup.image,\r\n                id: meetup._id.toString(),                \r\n            }))\r\n        },\r\n        //By using revalidate, we unlock a feature called incremental static generation\r\n        //It is number of seconds the Nextjs will wait,\r\n        //untill it re-generates this page for an incoming request.\r\n        //It means this page will not be only generated in build process,\r\n        //but also (for every seconds specified) on the server.\r\n        //This way newly generated page will replace old generated page.\r\n        //Thus your data will be not older than 10 seconds.\r\n        //Thus it will be re-generated on the server even after deplyment.\r\n        //Hence we dont need to re-deploy and re-built just becuase data changed.\r\n        revalidate: 10\r\n    };\r\n}\r\n\r\n\r\n/* This is an alternative of using getStaticProps()\r\nThe difference is that this function will not run during the build process,\r\nbut instead always on the server, after deployment.\r\nThe page will be re-generated after every incoming request,\r\nso you want to pre-generate the page dynamically,\r\non the fly after deployment on the server, not during the build process\r\nor not just every couple of seconds.\r\n\r\n\r\nexport async function getServerSideProps(context){\r\n   \r\n   const req = context.req;\r\n   const res = context.res;\r\n\r\n    return {\r\n        props: {\r\n            meetups: DUMMY_MEETUPS\r\n        }\r\n    };\r\n}\r\n*/\r\n\r\nexport default HomePage;"]},"metadata":{},"sourceType":"module"}